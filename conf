import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics

msg=pd.read_csv('naivetext.csv',names=['message','label'])
print("The dimension of the dataset : ",msg.shape)
msg['labelnum']=msg.label.map({'pos':1,'neg':0})

X=msg.message
Y=msg.labelnum

print(X)
print(Y)

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=42)
print("\n The Total no of training data",y_train.shape)
print("\n The Total no of testunf data",y_test.shape)

vectorizer=CountVectorizer()
X_train_dtm=vectorizer.fit_transform(X_train)
X_test_dtm=vectorizer.transform(X_test)

print("\n The word or token in text document \n")
print(vectorizer.get_feature_names)

clf=MultinomialNB()
clf.fit(X_train_dtm,y_train)

y_pred=clf.predict(X_test_dtm)

print("\n Accuracy of the Classifier ",metrics.accuracy_score(y_test,y_pred))
print("Confusion matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\n The value of precisin",metrics.precision_score(y_test,y_pred))
print("\n The value of recall ",metrics.recall_score(y_test,y_pred))



I love this sandwich,pos
This is an amazing place,pos
I feel very good about these beers,pos
This is my best work,pos
What an awesome view,pos
I do not like this restaurant,neg
I am tired of this stuff,neg
I can't deal with this,neg
He is my sworn enemy,neg
My boss is horrible,neg
This is an awesome place,pos
I do not like the taste of this juice,neg
I love to dance,pos
I am sick and tired of this place,neg
What a great holiday,pos
That is a bad locality to stay,neg
We will have good fun tomorrow,pos
I went to my enemy's house today,neg



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics

msg=pd.read_csv('naivetext.csv',names=['message','label'])
print("The dimension of the dataset : ",msg.shape)
msg['labelnum']=msg.label.map({'pos':1,'neg':0})

X=msg.message
Y=msg.labelnum

print(X)
print(Y)

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=42)
print("\n The Total no of training data",y_train.shape)
print("\n The Total no of testunf data",y_test.shape)

vectorizer=CountVectorizer()
X_train_dtm=vectorizer.fit_transform(X_train)
X_test_dtm=vectorizer.transform(X_test)

print("\n The word or token in text document \n")
print(vectorizer.get_feature_names)

clf=MultinomialNB()
clf.fit(X_train_dtm,y_train)

y_pred=clf.predict(X_test_dtm)

print("\n Accuracy of the Classifier ",metrics.accuracy_score(y_test,y_pred))
print("Confusion matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\n The value of precisin",metrics.precision_score(y_test,y_pred))
print("\n The value of recall ",metrics.recall_score(y_test,y_pred))

